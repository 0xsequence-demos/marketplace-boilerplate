/* eslint-disable */
// marketplace-api  89d78f474b7eedf86437f780c192f840f4ec4d7d
// --
// Code generated by webrpc-gen@v0.18.3 with typescript@v0.10.0 generator. DO NOT EDIT.
//
// webrpc-gen -schema=marketplace.ridl -target=typescript@v0.10.0 -client -out=./clients/marketplace.gen.ts

// WebRPC description and code-gen version
export const WebRPCVersion = 'v1'

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = ''

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = '89d78f474b7eedf86437f780c192f840f4ec4d7d'

//
// Types
//

export interface TokenMetadata {
  tokenId: string
  name: string
  description?: string
  image?: string
  video?: string
  audio?: string
  properties?: { [key: string]: any }
  attributes: Array<{ [key: string]: any }>
  image_data?: string
  external_url?: string
  background_color?: string
  animation_url?: string
  decimals?: number
  updatedAt?: string
  assets?: Array<Asset>
}

export interface Asset {
  id: number
  collectionId: number
  tokenId: string
  url?: string
  metadataField: string
  name?: string
  filesize?: number
  mimeType?: string
  width?: number
  height?: number
  updatedAt?: string
}
export enum SortOrder {
  DESC = 'DESC',
  ASC = 'ASC'
}
export enum OrderStatus {
  OPEN = 'OPEN',
  CLOSED = 'CLOSED',
  CANCELLED = 'CANCELLED'
}
export enum PropertyType {
  INT = 'INT',
  STRING = 'STRING',
  ARRAY = 'ARRAY',
  GENERIC = 'GENERIC'
}

export interface RuntimeStatus {
  healthOK: boolean
  startTime: string
  uptime: number
  ver: string
  branch: string
  commitHash: string
}

export interface Page {
  page?: number
  pageSize?: number
  column?: string
  before?: any
  after?: any
  sort?: Array<SortBy>
  more?: boolean
  cursor?: string
}

export interface SortBy {
  column: string
  order: SortOrder
}

export interface OrderbookOrder {
  orderId: string
  tokenContract: string
  tokenId: string
  isListing: boolean
  quantity: string
  quantityRemaining: string
  currencyAddress: string
  pricePerToken: string
  expiry: string
  orderStatus: OrderStatus
  createdBy: string
  createdAt: number
  orderbookContractAddress: string
}

export interface OrderbookOrderFilter {
  isListing?: boolean
  userAddress?: string
  tokenIds: Array<string>
}

export interface PropertyFilter {
  name: string
  type: PropertyType
  min?: number
  max?: number
  values?: Array<any>
}

export interface Filter {
  text?: string
  properties?: Array<PropertyFilter>
}

export interface ISequenceMarketStorageRequestParams {
  isListing: boolean
  isERC1155: boolean
  tokenContract: string
  tokenId: string
  quantity: string
  expiry: string
  currency: string
  pricePerToken: string
}

export interface CollectiblesFilter {
  listingsOnly: boolean
  text?: string
  properties?: Array<PropertyFilter>
}

export interface Listing {
  price: Price
  remainingStock: Amount
  validTo: number
  createdBy: string
  feeBps: number
  feeBreakdown: Array<FeeBreakdown>
}

export interface Amount {
  raw: string
  decimals: number
  formatted: string
}

export interface Price {
  currency: Currency
  amount: Amount
  netAmount: Amount
}

export interface Currency {
  contract: string
  symbol: string
  decimals: number
  logoUri: string
}

export interface FeeBreakdown {
  kind: string
  recipientAddress: string
  bps: number
}

export interface Offer {
  createdBy: string
  offeredBy: string
  validUntil: number
  status: string
  price: Price
  remainingStock: Amount
  feeBps: number
  feeBreakdown: Array<FeeBreakdown>
}

export interface Collectible {
  metadata: TokenMetadata
  listing?: Listing
  offer?: Offer
}

export interface OfferFilter {
  createdBy?: string
}

export interface Activity {
  type: string
  fromAddress: string
  toAddress: string
  txHash: string
  timestamp: number
  tokenId: string
  tokenImage: string
  tokenName: string
  currency?: Currency
}

export interface Marketplace {
  getOrderbookOrders(
    args: GetOrderbookOrdersArgs,
    headers?: object
  ): Promise<GetOrderbookOrdersReturn>
  getUserActivities(
    args: GetUserActivitiesArgs,
    headers?: object
  ): Promise<GetUserActivitiesReturn>
  getTopOrders(
    args: GetTopOrdersArgs,
    headers?: object
  ): Promise<GetTopOrdersReturn>
  getFloorPrice(
    args: GetFloorPriceArgs,
    headers?: object
  ): Promise<GetFloorPriceReturn>
}

export interface GetOrderbookOrdersArgs {
  page?: Page
  orderbookContractAddress: string
  collectionAddress: string
  currencyAddresses: Array<string>
  filters: OrderbookOrderFilter
  orderStatuses?: Array<OrderStatus>
  metadataFilter?: Filter
  beforeExpiryTimestamp: number
}

export interface GetOrderbookOrdersReturn {
  page?: Page
  orders: Array<OrderbookOrder>
}
export interface GetUserActivitiesArgs {
  page?: Page
  orderbookContractAddress: string
  collectionAddress: string
  currencyAddresses: Array<string>
  userAddress: string
  tokenIDs: Array<string>
}

export interface GetUserActivitiesReturn {
  page?: Page
  orders: Array<OrderbookOrder>
}
export interface GetTopOrdersArgs {
  orderbookContractAddress: string
  collectionAddress: string
  currencyAddresses: Array<string>
  tokenIDs: Array<string>
  isListing: boolean
  priceSort: SortOrder
  excludeUser?: string
}

export interface GetTopOrdersReturn {
  orders: Array<OrderbookOrder>
}
export interface GetFloorPriceArgs {
  orderbookContractAddress: string
  collectionAddress: string
  currencyAddresses: Array<string>
}

export interface GetFloorPriceReturn {
  order: OrderbookOrder
}

export interface Orderbook {
  acceptRequest(
    args: AcceptRequestArgs,
    headers?: object
  ): Promise<AcceptRequestReturn>
  acceptRequestBatch(
    args: AcceptRequestBatchArgs,
    headers?: object
  ): Promise<AcceptRequestBatchReturn>
  cancelRequest(
    args: CancelRequestArgs,
    headers?: object
  ): Promise<CancelRequestReturn>
  cancelRequestBatch(
    args: CancelRequestBatchArgs,
    headers?: object
  ): Promise<CancelRequestBatchReturn>
  createRequest(
    args: CreateRequestArgs,
    headers?: object
  ): Promise<CreateRequestReturn>
  createRequestBatch(
    args: CreateRequestBatchArgs,
    headers?: object
  ): Promise<CreateRequestBatchReturn>
  getRequest(args: GetRequestArgs, headers?: object): Promise<GetRequestReturn>
  getRequestBatch(
    args: GetRequestBatchArgs,
    headers?: object
  ): Promise<GetRequestBatchReturn>
  getRoyaltyInfo(
    args: GetRoyaltyInfoArgs,
    headers?: object
  ): Promise<GetRoyaltyInfoReturn>
  isRequestValid(
    args: IsRequestValidArgs,
    headers?: object
  ): Promise<IsRequestValidReturn>
  isRequestValidBatch(
    args: IsRequestValidBatchArgs,
    headers?: object
  ): Promise<IsRequestValidBatchReturn>
}

export interface AcceptRequestArgs {
  requestId: string
  quantity: string
  recipient: string
  additionalFees: Array<string>
  additionalFeeRecipients: Array<string>
}

export interface AcceptRequestReturn {
  output: string
}
export interface AcceptRequestBatchArgs {
  requestIds: Array<string>
  quantities: Array<string>
  recipients: Array<string>
  additionalFees: Array<string>
  additionalFeeRecipients: Array<string>
}

export interface AcceptRequestBatchReturn {
  output: string
}
export interface CancelRequestArgs {
  requestId: string
}

export interface CancelRequestReturn {
  output: string
}
export interface CancelRequestBatchArgs {
  requestIds: Array<string>
}

export interface CancelRequestBatchReturn {
  output: string
}
export interface CreateRequestArgs {
  request: ISequenceMarketStorageRequestParams
}

export interface CreateRequestReturn {
  output: string
}
export interface CreateRequestBatchArgs {
  requests: Array<ISequenceMarketStorageRequestParams>
}

export interface CreateRequestBatchReturn {
  output: string
}
export interface GetRequestArgs {
  requestId: string
}

export interface GetRequestReturn {
  output: string
}
export interface GetRequestBatchArgs {
  requestIds: Array<string>
}

export interface GetRequestBatchReturn {
  output: string
}
export interface GetRoyaltyInfoArgs {
  tokenContract: string
  tokenId: string
  cost: string
}

export interface GetRoyaltyInfoReturn {
  output: string
}
export interface IsRequestValidArgs {
  requestId: string
  quantity: string
}

export interface IsRequestValidReturn {
  output: string
}
export interface IsRequestValidBatchArgs {
  requestIds: Array<string>
  quantities: Array<string>
}

export interface IsRequestValidBatchReturn {
  output: string
}

export interface AggregatedOrderbook {
  listSellCollectibles(
    args: ListSellCollectiblesArgs,
    headers?: object
  ): Promise<ListSellCollectiblesReturn>
  listCollectibles(
    args: ListCollectiblesArgs,
    headers?: object
  ): Promise<ListCollectiblesReturn>
  getCollectible(
    args: GetCollectibleArgs,
    headers?: object
  ): Promise<GetCollectibleReturn>
  listCollectibleListings(
    args: ListCollectibleListingsArgs,
    headers?: object
  ): Promise<ListCollectibleListingsReturn>
  listCollectibleOffers(
    args: ListCollectibleOffersArgs,
    headers?: object
  ): Promise<ListCollectibleOffersReturn>
  listCollectibleActivities(
    args: ListCollectibleActivitiesArgs,
    headers?: object
  ): Promise<ListCollectibleActivitiesReturn>
  listUserActivities(
    args: ListUserActivitiesArgs,
    headers?: object
  ): Promise<ListUserActivitiesReturn>
}

export interface ListSellCollectiblesArgs {
  collectionAddress: string
  userAddress: string
  page?: Page
}

export interface ListSellCollectiblesReturn {
  collectibles: Array<Collectible>
  page?: Page
}
export interface ListCollectiblesArgs {
  collectionAddress: string
  filter?: CollectiblesFilter
  page?: Page
}

export interface ListCollectiblesReturn {
  collectibles: Array<Collectible>
  page?: Page
}
export interface GetCollectibleArgs {
  collectionAddress: string
  tokenId: string
}

export interface GetCollectibleReturn {
  collectible: Collectible
}
export interface ListCollectibleListingsArgs {
  collectionAddress: string
  tokenId: string
  page?: Page
}

export interface ListCollectibleListingsReturn {
  listings: Array<Listing>
  page?: Page
}
export interface ListCollectibleOffersArgs {
  collectionAddress: string
  tokenId: string
  filter?: OfferFilter
  page?: Page
}

export interface ListCollectibleOffersReturn {
  offers: Array<Offer>
  page?: Page
}
export interface ListCollectibleActivitiesArgs {
  collectionAddress: string
  tokenId: string
  page?: Page
}

export interface ListCollectibleActivitiesReturn {
  activities: Array<Activity>
  page?: Page
}
export interface ListUserActivitiesArgs {
  userAddress: string
  collectionAddress: string
  page?: Page
}

export interface ListUserActivitiesReturn {
  activities: Array<Activity>
  page?: Page
}

//
// Client
//
export class OldMarketplace implements Marketplace {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/Marketplace/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = (input: RequestInfo, init?: RequestInit) => fetch(input, init)
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }

  getOrderbookOrders = (
    args: GetOrderbookOrdersArgs,
    headers?: object
  ): Promise<GetOrderbookOrdersReturn> => {
    return this.fetch(
      this.url('GetOrderbookOrders'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          page: <Page>_data.page,
          orders: <Array<OrderbookOrder>>_data.orders
        }
      })
    })
  }

  getUserActivities = (
    args: GetUserActivitiesArgs,
    headers?: object
  ): Promise<GetUserActivitiesReturn> => {
    return this.fetch(
      this.url('GetUserActivities'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          page: <Page>_data.page,
          orders: <Array<OrderbookOrder>>_data.orders
        }
      })
    })
  }

  getTopOrders = (
    args: GetTopOrdersArgs,
    headers?: object
  ): Promise<GetTopOrdersReturn> => {
    return this.fetch(
      this.url('GetTopOrders'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          orders: <Array<OrderbookOrder>>_data.orders
        }
      })
    })
  }

  getFloorPrice = (
    args: GetFloorPriceArgs,
    headers?: object
  ): Promise<GetFloorPriceReturn> => {
    return this.fetch(
      this.url('GetFloorPrice'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          order: <OrderbookOrder>_data.order
        }
      })
    })
  }
}

export class Orderbook implements Orderbook {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/Orderbook/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = (input: RequestInfo, init?: RequestInit) => fetch(input, init)
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }

  acceptRequest = (
    args: AcceptRequestArgs,
    headers?: object
  ): Promise<AcceptRequestReturn> => {
    return this.fetch(
      this.url('AcceptRequest'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          output: <string>_data.output
        }
      })
    })
  }

  acceptRequestBatch = (
    args: AcceptRequestBatchArgs,
    headers?: object
  ): Promise<AcceptRequestBatchReturn> => {
    return this.fetch(
      this.url('AcceptRequestBatch'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          output: <string>_data.output
        }
      })
    })
  }

  cancelRequest = (
    args: CancelRequestArgs,
    headers?: object
  ): Promise<CancelRequestReturn> => {
    return this.fetch(
      this.url('CancelRequest'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          output: <string>_data.output
        }
      })
    })
  }

  cancelRequestBatch = (
    args: CancelRequestBatchArgs,
    headers?: object
  ): Promise<CancelRequestBatchReturn> => {
    return this.fetch(
      this.url('CancelRequestBatch'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          output: <string>_data.output
        }
      })
    })
  }

  createRequest = (
    args: CreateRequestArgs,
    headers?: object
  ): Promise<CreateRequestReturn> => {
    return this.fetch(
      this.url('CreateRequest'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          output: <string>_data.output
        }
      })
    })
  }

  createRequestBatch = (
    args: CreateRequestBatchArgs,
    headers?: object
  ): Promise<CreateRequestBatchReturn> => {
    return this.fetch(
      this.url('CreateRequestBatch'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          output: <string>_data.output
        }
      })
    })
  }

  getRequest = (
    args: GetRequestArgs,
    headers?: object
  ): Promise<GetRequestReturn> => {
    return this.fetch(
      this.url('GetRequest'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          output: <string>_data.output
        }
      })
    })
  }

  getRequestBatch = (
    args: GetRequestBatchArgs,
    headers?: object
  ): Promise<GetRequestBatchReturn> => {
    return this.fetch(
      this.url('GetRequestBatch'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          output: <string>_data.output
        }
      })
    })
  }

  getRoyaltyInfo = (
    args: GetRoyaltyInfoArgs,
    headers?: object
  ): Promise<GetRoyaltyInfoReturn> => {
    return this.fetch(
      this.url('GetRoyaltyInfo'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          output: <string>_data.output
        }
      })
    })
  }

  isRequestValid = (
    args: IsRequestValidArgs,
    headers?: object
  ): Promise<IsRequestValidReturn> => {
    return this.fetch(
      this.url('IsRequestValid'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          output: <string>_data.output
        }
      })
    })
  }

  isRequestValidBatch = (
    args: IsRequestValidBatchArgs,
    headers?: object
  ): Promise<IsRequestValidBatchReturn> => {
    return this.fetch(
      this.url('IsRequestValidBatch'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          output: <string>_data.output
        }
      })
    })
  }
}

export class AggregatedOrderbook implements AggregatedOrderbook {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/AggregatedOrderbook/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = (input: RequestInfo, init?: RequestInit) => fetch(input, init)
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }

  listSellCollectibles = (
    args: ListSellCollectiblesArgs,
    headers?: object
  ): Promise<ListSellCollectiblesReturn> => {
    return this.fetch(
      this.url('ListSellCollectibles'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          collectibles: <Array<Collectible>>_data.collectibles,
          page: <Page>_data.page
        }
      })
    })
  }

  listCollectibles = (
    args: ListCollectiblesArgs,
    headers?: object
  ): Promise<ListCollectiblesReturn> => {
    return this.fetch(
      this.url('ListCollectibles'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          collectibles: <Array<Collectible>>_data.collectibles,
          page: <Page>_data.page
        }
      })
    })
  }

  getCollectible = (
    args: GetCollectibleArgs,
    headers?: object
  ): Promise<GetCollectibleReturn> => {
    return this.fetch(
      this.url('GetCollectible'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          collectible: <Collectible>_data.collectible
        }
      })
    })
  }

  listCollectibleListings = (
    args: ListCollectibleListingsArgs,
    headers?: object
  ): Promise<ListCollectibleListingsReturn> => {
    return this.fetch(
      this.url('ListCollectibleListings'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          listings: <Array<Listing>>_data.listings,
          page: <Page>_data.page
        }
      })
    })
  }

  listCollectibleOffers = (
    args: ListCollectibleOffersArgs,
    headers?: object
  ): Promise<ListCollectibleOffersReturn> => {
    return this.fetch(
      this.url('ListCollectibleOffers'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          offers: <Array<Offer>>_data.offers,
          page: <Page>_data.page
        }
      })
    })
  }

  listCollectibleActivities = (
    args: ListCollectibleActivitiesArgs,
    headers?: object
  ): Promise<ListCollectibleActivitiesReturn> => {
    return this.fetch(
      this.url('ListCollectibleActivities'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          activities: <Array<Activity>>_data.activities,
          page: <Page>_data.page
        }
      })
    })
  }

  listUserActivities = (
    args: ListUserActivitiesArgs,
    headers?: object
  ): Promise<ListUserActivitiesReturn> => {
    return this.fetch(
      this.url('ListUserActivities'),
      createHTTPRequest(args, headers)
    ).then(res => {
      return buildResponse(res).then(_data => {
        return {
          activities: <Array<Activity>>_data.activities,
          page: <Page>_data.page
        }
      })
    })
  }
}

export interface WebRPCError extends Error {
  code: string
  msg: string
  status: number
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch (err) {
      throw {
        code: 'unknown',
        msg: `expecting JSON, got: ${text}`,
        status: res.status
      } as WebRPCError
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}

export type Fetch = (
  input: RequestInfo,
  init?: RequestInit
) => Promise<Response>
